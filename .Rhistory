}
}
# Optimization:
res = optimize(data, start, formulas, verbose, lower_bound, upper_bound, factr)
invisible(res)
}
factr <- 1e-8
for(i in 1:5) {
ans <- spm_time_dep(data[[1]][,2:6], formulas=list(at="ay", #at="ay+by*t",
f1t="af1", # f1t="af1+bf1*t",
Qt="aq + bq*t",
ft="af",  # ft="af+bf*t",
bt="b",
mu0t="mu0a*exp(mu0b*t)"),
start=list(ay=-0.1, #by=0,
af1=80, #bf1=0,
aq=1e-3, bq=1e-4,
af=80, #bf=0,
mu0a=1e-4, mu0b=0.08,
b=5),
verbose = FALSE,
factr=factr)
cat(factr)
cat("\n")
print(unlist(ans))
factr <- factr*10
}
# Testing for variable step size:
factr <- 1e-8
for(i in 1:5) {
ans <- spm_time_dep(data[[1]][,2:6], formulas=list(at="ay+by*t",
f1t="af1+bf1*t",
Qt="aq + bq*t",
ft="af+bf*t",
bt="b",
mu0t="mu0a*exp(mu0b*t)"),
start=list(ay=-0.1, by=0.001,
af1=80, bf1=0.002,
aq=1e-3, bq=1e-4,
af=80, bf=0.009,
mu0a=1e-4, mu0b=0.08,
b=5),
verbose = FALSE,
factr=factr)
cat(factr)
cat("\n")
print(unlist(ans))
factr <- factr*10
}
factr <- 1e-16
for(i in 1:10) {
ans <- spm_time_dep(data[[1]][,2:6], formulas=list(at="ay+by*t",
f1t="af1+bf1*t",
Qt="aq + bq*t",
ft="af+bf*t",
bt="b",
mu0t="mu0a*exp(mu0b*t)"),
start=list(ay=-0.1, by=0.001,
af1=80, bf1=0.002,
aq=1e-3, bq=1e-4,
af=80, bf=0.009,
mu0a=1e-4, mu0b=0.08,
b=5),
verbose = FALSE,
factr=factr)
cat(factr)
cat("\n")
print(unlist(ans))
factr <- factr*10
}
data <- prepare_data(longdat = longitudinal, vitstat = vitstat,
col.status = "IsDead",col.id = "ID", covariates = c("BMI"))
# Testing for variable step size:
factr <- 1e-16
for(i in 1:10) {
ans <- spm_time_dep(data[[1]][,2:6], formulas=list(at="ay+by*t",
f1t="af1+bf1*t",
Qt="aq + bq*t",
ft="af+bf*t",
bt="b",
mu0t="mu0a*exp(mu0b*t)"),
start=list(ay=-0.1, by=0.001,
af1=80, bf1=0.002,
aq=1e-3, bq=1e-4,
af=80, bf=0.009,
mu0a=1e-4, mu0b=0.08,
b=5),
verbose = FALSE,
factr=factr)
cat(factr)
cat("\n")
print(unlist(ans))
factr <- factr*10
}
library(spm)
# Data preparation:
## Real data:
### Loading data:
#### Female, negative, GroupPSC = 1
setwd("~/Projects/spm_test/SPM/test_for_GSA2015/")
covariates <- read.csv("ListCovar_test.csv")
snps <- read.csv("SNPs_ver_GSA2015/females/SCORESneg_pattern_snps_FHS_CARe.csv")
longitudinal <- read.csv("CovarFHS_cleaned.csv")
vitstat <- read.csv("FHS_mortality_FRAM_ver22.csv")
# Merging snps and vitstat by ID:
vitstat.snps <- merge(vitstat, snps, by.x = "ID", by.y = "ID")
vitstat.snps <- vitstat.snps[which(vitstat.snps$GroupPSC == 1), ]
longitudinal <- longitudinal[which(longitudinal$ID %in% vitstat.snps$ID), ]
data <- prepare_data(longdat = longitudinal, vitstat = vitstat,
col.status = "IsDead",col.id = "ID", covariates = c("BG"))
# Testing for variable step size:
factr <- 1e-16
for(i in 1:1) {
ans <- spm_time_dep(data[[1]][,2:6], formulas=list(at="a_y+b_y*t",
f1t="a_f1+b_f1*t",
Qt="a_q + b_q*t",
ft="a_f+b_f*t",
bt="b",
mu0t="mu_0a*exp(mu_0b*t)"),
start=list(a_y=-0.1, b_y=0.001,
a_f1=80, b_f1=0.002,
a_q=1e-3, b_q=1e-4,
a_f=80, b_f=0.009,
mu_0a=1e-4, mu_0b=0.08,
b=5),
verbose = F,
factr=factr)
cat("factr\n")
cat(factr)
cat("\n")
print(unlist(ans))
factr <- factr*10
}
factr <- 1e-16
for(i in 1:1) {
ans <- spm_time_dep(data[[1]][,2:6], formulas=list(at="a_y+b_y*t",
f1t="a_f1+b_f1*t",
Qt="a_q + b_q*t",
ft="a_f+b_f*t",
bt="b",
mu0t="mu_0a*exp(mu_0b*t)"),
start=list(a_y=-0.1, b_y=0.001,
a_f1=80, b_f1=0.002,
a_q=1e-3, b_q=1e-4,
a_f=80, b_f=0.009,
mu_0a=1e-4, mu_0b=0.08,
b=5),
verbose = T,
factr=factr)
cat("factr\n")
cat(factr)
cat("\n")
print(unlist(ans))
factr <- factr*10
}
plot(hp, mpg)
attach(mtcars)
plot(hp, mpg)
plot(hp, mpg, type = "p")
plot(hp, mpg, type = "l")
head(mtcars[, c("hp", "mpg")])
plot(hp, mpg, type = "p")
x <- rep(1,25)
plot(x, pch = 1:25, axes = F, xlab = "", ylab = "")
text(1:25,.95,labels = 1:25)
plot(hp, mpg, type = "p", pch=2)
plot(hp, mpg, type = "p", pch=3)
# Change point style:
plot(hp, mpg, type = "p", main = "MPG vs. hp", pch=3)
par(mfrow = c(1,2))                    # Put 2 plots on the same device
plot(hp,mpg)
# Parameters with explanation:
plot(hp,mpg,
main = "MPG vs. Displacement",    # Add a title
type = "p",
col = "grey",                     # Change the color of the points
pch = 16,                         # Change the plotting symbol  see help(points)
cex = 1,                          # Change size of plotting symbol
xlab = "Displacement (cu. in)",   # Add a label on the x-axis
ylab = "Miles per Gallon",        # Add a label on the y-axis
bty = "n",                        # Remove the box around the plot
#asp = 1,                         # Change the y/x aspect ratio see help(plot)
font.axis = 1,                    # Change axis font to bold italic
col.axis = "black",               # Set the color of the axis
xlim = c(85,500),                 # Set limits on x axis
ylim = c(10,35),                  # Set limits on y axis
las=1)                            # Make axis labels parallel to x-axis
abline(lm(mpg ~ disp),                 # Add regression line y ~ x
col="red",                      # regression line color
lty = 2,                        # use dashed line
lwd = 2)                        # Set thickness of the line
lines(lowess(mpg ~ disp),              # Add lowess line y ~ x
col="dark blue",                 # Set color of lowess line
lwd= 2)                          # Set thickness of the lowess line
leg.txt <- c("red = lm", "blue = lowess") # Text for legend
legend(list(x = 180,y = 35),           # Set location of the legend
legend = leg.txt,               # Specify text
col = c("red","dark blue"),     # Set colors for legend
lty = c(2,1),                   # Set type of lines in legend
merge = TRUE)                   # merge points and lines
# Set the background color to "dark grey"
par(bg = "grey")
plot(education, prestige, type = "n")
# Now plot the points on the existing window
plot(hp,mpg)
# Now set the plot region to grey
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "light grey")
# Now plot the points on the existing window
points(hp,mpg)
# Some handy plotting parameters
par(mfrow = c(1,2))                    # Put 2 plots on the same device
plot(hp,mpg)
# Parameters with explanation:
plot(hp,mpg,
main = "MPG vs. Displacement",    # Add a title
type = "p",
col = "grey",                     # Change the color of the points
pch = 16,                         # Change the plotting symbol  see help(points)
cex = 1,                          # Change size of plotting symbol
xlab = "Displacement (cu. in)",   # Add a label on the x-axis
ylab = "Miles per Gallon",        # Add a label on the y-axis
bty = "n",                        # Remove the box around the plot
#asp = 1,                         # Change the y/x aspect ratio see help(plot)
font.axis = 1,                    # Change axis font to bold italic
col.axis = "black",               # Set the color of the axis
xlim = c(85,500),                 # Set limits on x axis
ylim = c(10,35),                  # Set limits on y axis
las=1)                            # Make axis labels parallel to x-axis
abline(lm(mpg ~ disp),                 # Add regression line y ~ x
col="red",                      # regression line color
lty = 2,                        # use dashed line
lwd = 2)                        # Set thickness of the line
lines(lowess(mpg ~ disp),              # Add lowess line y ~ x
col="dark blue",                 # Set color of lowess line
lwd= 2)                          # Set thickness of the lowess line
leg.txt <- c("red = lm", "blue = lowess") # Text for legend
legend(list(x = 180,y = 35),           # Set location of the legend
legend = leg.txt,               # Specify text
col = c("red","dark blue"),     # Set colors for legend
lty = c(2,1),                   # Set type of lines in legend
merge = TRUE)                   # merge points and lines
# Set the background color to "dark grey"
par(bg = "grey")
# Now plot the points on the existing window
plot(hp,mpg)
# Now set the plot region to grey
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "light grey")
# Now plot the points on the existing window
points(hp,mpg)
#===========================Extended example==============================#
# Some handy plotting parameters
par(mfrow = c(1,2))                    # Put 2 plots on the same device
plot(hp,mpg)
# Parameters with explanation:
plot(hp,mpg,
main = "MPG vs. Displacement",    # Add a title
type = "p",
col = "grey",                     # Change the color of the points
pch = 16,                         # Change the plotting symbol  see help(points)
cex = 1,                          # Change size of plotting symbol
xlab = "Displacement (cu. in)",   # Add a label on the x-axis
ylab = "Miles per Gallon",        # Add a label on the y-axis
bty = "n",                        # Remove the box around the plot
#asp = 1,                         # Change the y/x aspect ratio see help(plot)
font.axis = 1,                    # Change axis font to bold italic
col.axis = "black",               # Set the color of the axis
xlim = c(85,500),                 # Set limits on x axis
ylim = c(10,35),                  # Set limits on y axis
las=1)                            # Make axis labels parallel to x-axis
abline(lm(mpg ~ disp),                 # Add regression line y ~ x
col="red",                      # regression line color
lty = 2,                        # use dashed line
lwd = 2)                        # Set thickness of the line
lines(lowess(mpg ~ disp),              # Add lowess line y ~ x
col="dark blue",                 # Set color of lowess line
lwd= 2)                          # Set thickness of the lowess line
leg.txt <- c("red = lm", "blue = lowess") # Text for legend
legend(list(x = 180,y = 35),           # Set location of the legend
legend = leg.txt,               # Specify text
col = c("red","dark blue"),     # Set colors for legend
lty = c(2,1),                   # Set type of lines in legend
merge = TRUE)                   # merge points and lines
# Set the background color to "dark grey"
par(bg = "grey")
# Now plot the points on the existing window
plot(hp,mpg)
# Now set the plot region to grey
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "light grey")
# Now plot the points on the existing window
points(hp,mpg)
plot(hp, mpg, type = "l") # Looks ugly
plot(hp, mpg, type = "p")
# Add a title:
plot(hp, mpg, main = "MPG vs. hp")
# Change point shape
# Let's see available point shapes:
# From: http://www.r-bloggers.com/some-basics-for-base-graphics/
plot(hp, mpg, type = "l") # Looks ugly
plot(hp, mpg, type = "p")
# Add a title:
plot(hp, mpg, main = "MPG vs. hp")
# Change point shape
# Let's see available point shapes:
# From: http://www.r-bloggers.com/some-basics-for-base-graphics/
par(mfrow = c(1,2))                    # Put 2 plots on the same device
plot(hp,mpg)
# Parameters with explanation:
plot(hp,mpg,
main = "MPG vs. Displacement",    # Add a title
type = "p",
col = "grey",                     # Change the color of the points
pch = 16,                         # Change the plotting symbol  see help(points)
cex = 1,                          # Change size of plotting symbol
xlab = "Displacement (cu. in)",   # Add a label on the x-axis
ylab = "Miles per Gallon",        # Add a label on the y-axis
bty = "n",                        # Remove the box around the plot
#asp = 1,                         # Change the y/x aspect ratio see help(plot)
font.axis = 1,                    # Change axis font to bold italic
col.axis = "black",               # Set the color of the axis
xlim = c(20,500),                 # Set limits on x axis
ylim = c(5,50),                  # Set limits on y axis
las=1)                            # Make axis labels parallel to x-axis
abline(lm(mpg ~ disp),                 # Add regression line y ~ x
col="red",                      # regression line color
lty = 2,                        # use dashed line
lwd = 2)                        # Set thickness of the line
#======================Base plotting system Example1============#
#===========================Basics================================#
attach(mtcars)
head(mtcars[, c("hp", "mpg")])
plot(hp, mpg)
#==========================Some more===============================#
plot(hp, mpg, type = "l") # Looks ugly
plot(hp, mpg, type = "p")
# Add a title:
plot(hp, mpg, main = "MPG vs. hp")
# Change point shape
# Let's see available point shapes:
# From: http://www.r-bloggers.com/some-basics-for-base-graphics/
#======================More======================#
x <- rep(1,25)
plot(x, pch = 1:25, axes = F, xlab = "", ylab = "")
text(1:25,.95,labels = 1:25)
# So:
plot(hp, mpg, type = "p", main = "MPG vs. hp", pch=3)
#===========================Extended with parameter explanations==============================#
# From: http://www.r-bloggers.com/some-basics-for-base-graphics/
# Some handy plotting parameters
par(mfrow = c(1,2))                    # Put 2 plots on the same device
plot(hp,mpg)
# Parameters with explanation:
plot(hp,mpg,
main = "MPG vs. Displacement",    # Add a title
type = "p",
col = "grey",                     # Change the color of the points
pch = 16,                         # Change the plotting symbol  see help(points)
cex = 1,                          # Change size of plotting symbol
xlab = "Horse power",   # Add a label on the x-axis
ylab = "Miles per Gallon",        # Add a label on the y-axis
bty = "n",                        # Remove the box around the plot
font.axis = 1,                    # Change axis font to bold italic
col.axis = "black",               # Set the color of the axis
xlim = c(20,500),                 # Set limits on x axis
ylim = c(5,50),                  # Set limits on y axis
las=1)                            # Make axis labels parallel to x-axis
abline(lm(mpg ~ disp),                 # Add regression line y ~ x
col="red",                      # regression line color
lty = 2,                        # use dashed line
lwd = 2)                        # Set thickness of the line
lines(lowess(mpg ~ disp),              # Add lowess line y ~ x
col="dark blue",                 # Set color of lowess line
lwd= 2)                          # Set thickness of the lowess line
leg.txt <- c("red = lm", "blue = lowess") # Text for legend
legend(list(x = 180,y = 35),           # Set location of the legend
legend = leg.txt,               # Specify text
col = c("red","dark blue"),     # Set colors for legend
lty = c(2,1),                   # Set type of lines in legend
merge = TRUE)                   # merge points and lines
#=========End of base ploting system Example 1===========#
# Data loading, histograms and saving files:
setwd("~/Projects/rgroup/PlottingSystemsInR/")
# Loading the data:
data <- read.csv(unz("exdata_data_household_power_consumption.zip", "household_power_consumption.txt"),sep = ";", header = T,skipNul = T)
data$Date <- as.Date(data$Date,format="%d/%m/%Y")
used_data <- data[which(data$Date >= "2007-02-01" & data$Date <= "2007-02-02"),]
datetime <- strptime(paste(used_data$Date,used_data$Time,sep=' '),"%Y-%m-%d %H:%M:%S")
setwd("~/Projects/rgroup/PlottingSystemsInR/")
# Loading the data:
data <- read.csv(unz("exdata_data_household_power_consumption.zip", "household_power_consumption.txt"),sep = ";", header = T,skipNul = T)
download.file(url="https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", method="curl")
# Loading the data (household electric power consumption):
download.file(url="https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
destfile = "household_power_consumption.zip",
method="curl")
data <- read.csv(unz("exdata_data_household_power_consumption.zip", "household_power_consumption.txt"),sep = ";", header = T,skipNul = T)
?uunzip
?unzip
unzip("household_power_consumption.zip")
unzip("household_power_consumption.zip")
data <- read.csv("household_power_consumption.txt",sep = ";", header = T,skipNul = T)
data$Date <- as.Date(data$Date,format="%d/%m/%Y")
used_data <- data[which(data$Date >= "2007-02-01" & data$Date <= "2007-02-02"),]
datetime <- strptime(paste(used_data$Date,used_data$Time,sep=' '),"%Y-%m-%d %H:%M:%S")
# Building a histogram:
hist(as.numeric(as.character(used_data$Global_active_power)),col="red",xlab="Global active power (kilowatts)", main="Global active power")
# Constructing the .png:
png(file = "plot1.png")
hist(as.numeric(as.character(used_data$Global_active_power)),col="red",xlab="Global active power (kilowatts)", main="Global active power")
dev.off()
# Building a histogram:
hist(as.numeric(as.character(used_data$Global_active_power)),
col="red",
xlab="Global active power (kilowatts)",
main="Global active power")
# Constructing the .png:
png(file = "plot1.png")
hist(as.numeric(as.character(used_data$Global_active_power)),col="red",xlab="Global active power (kilowatts)", main="Global active power")
dev.off() # Do not forget!
#=========End of base ploting system Example 1===========#
# Constructing the plot:
plot(datetime,as.numeric(as.character(used_data$Global_active_power)), ylab="Global active power (kilowatts)", xlab="", type = "l")
png(file = "plot2.png")
plot(datetime,as.numeric(as.character(used_data$Global_active_power)), ylab="Global active power (kilowatts)", xlab="", type = "l")
dev.off()
# Constructing the plot:
plot(datetime,as.numeric(as.character(used_data$Sub_metering_1)), xlab="", type = "l", ylab="Energy sub metering")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_2)), col = "red")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_3)), col = "blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"), lty=1, cex=0.7)
# Constructing the .png:
png(file = "plot3.png")
plot(datetime,as.numeric(as.character(used_data$Sub_metering_1)), xlab="", type = "l", ylab="Energy sub metering")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_2)), col = "red")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_3)), col = "blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"), lty=1, cex=0.7)
dev.off()
#=========End of base ploting system Example 2===========#
par(mfrow=c(2,2))
plot(datetime,as.numeric(as.character(used_data$Global_active_power)), ylab="Global active power (kilowatts)", xlab="", type = "l")
plot(datetime,as.numeric(as.character(used_data$Voltage)), ylab="Voltage", xlab="datetime", type = 'l')
plot(datetime,as.numeric(as.character(used_data$Sub_metering_1)), xlab="", type = "l", ylab="Energy sub metering")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_2)), col = "red")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_3)), col = "blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"), lty=1, cex=0.7)
plot(datetime,as.numeric(as.character(used_data$Global_reactive_power)), ylab="Global_reactive_power", xlab="datetime", type = "l")
## Constructing the .png:
png(file = "plot4.png")
par(mfrow=c(2,2))
plot(datetime,as.numeric(as.character(used_data$Global_active_power)), ylab="Global active power (kilowatts)", xlab="", type = "l")
plot(datetime,as.numeric(as.character(used_data$Voltage)), ylab="Voltage", xlab="datetime", type = 'l')
plot(datetime,as.numeric(as.character(used_data$Sub_metering_1)), xlab="", type = "l", ylab="Energy sub metering")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_2)), col = "red")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_3)), col = "blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"), lty=1, cex=0.7)
plot(datetime,as.numeric(as.character(used_data$Global_reactive_power)), ylab="Global_reactive_power", xlab="datetime", type = "l")
dev.off()
#=========End of base ploting system Example 2===========#
## Constructing the plots:
datetime <- strptime(paste(used_data$Date,used_data$Time,sep=' '),"%Y-%m-%d %H:%M:%S")
par(mfrow=c(2,2))
plot(datetime,as.numeric(as.character(used_data$Global_active_power)), ylab="Global active power (kilowatts)", xlab="", type = "l")
plot(datetime,as.numeric(as.character(used_data$Voltage)), ylab="Voltage", xlab="datetime", type = 'l')
plot(datetime,as.numeric(as.character(used_data$Sub_metering_1)), xlab="", type = "l", ylab="Energy sub metering")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_2)), col = "red")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_3)), col = "blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"), lty=1, cex=0.7)
plot(datetime,as.numeric(as.character(used_data$Global_reactive_power)), ylab="Global_reactive_power", xlab="datetime", type = "l")
## Constructing the .png:
png(file = "plot4.png")
par(mfrow=c(2,2))
plot(datetime,as.numeric(as.character(used_data$Global_active_power)), ylab="Global active power (kilowatts)", xlab="", type = "l")
plot(datetime,as.numeric(as.character(used_data$Voltage)), ylab="Voltage", xlab="datetime", type = 'l')
plot(datetime,as.numeric(as.character(used_data$Sub_metering_1)), xlab="", type = "l", ylab="Energy sub metering")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_2)), col = "red")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_3)), col = "blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"), lty=1, cex=0.7)
plot(datetime,as.numeric(as.character(used_data$Global_reactive_power)), ylab="Global_reactive_power", xlab="datetime", type = "l")
dev.off()
#=========End of base ploting system Example 2===========#
setwd("~/Projects/rgroup/PlottingSystemsInR/")
# Loading the data (household electric power consumption):
download.file(url="https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
destfile = "household_power_consumption.zip",
method="curl")
unzip("household_power_consumption.zip")
data <- read.csv("household_power_consumption.txt",sep = ";", header = T,skipNul = T)
data$Date <- as.Date(data$Date,format="%d/%m/%Y")
used_data <- data[which(data$Date >= "2007-02-01" & data$Date <= "2007-02-02"),]
datetime <- strptime(paste(used_data$Date,used_data$Time,sep=' '),"%Y-%m-%d %H:%M:%S")
par(mfrow=c(2,2))
plot(datetime,as.numeric(as.character(used_data$Global_active_power)), ylab="Global active power (kilowatts)", xlab="", type = "l")
plot(datetime,as.numeric(as.character(used_data$Voltage)), ylab="Voltage", xlab="datetime", type = 'l')
plot(datetime,as.numeric(as.character(used_data$Sub_metering_1)), xlab="", type = "l", ylab="Energy sub metering")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_2)), col = "red")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_3)), col = "blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"), lty=1, cex=0.7)
plot(datetime,as.numeric(as.character(used_data$Global_reactive_power)), ylab="Global_reactive_power", xlab="datetime", type = "l")
plot(datetime,as.numeric(as.character(used_data$Global_active_power)), ylab="Global active power (kilowatts)", xlab="", type = "l")
plot(datetime,as.numeric(as.character(used_data$Voltage)), ylab="Voltage", xlab="datetime", type = 'l')
plot(datetime,as.numeric(as.character(used_data$Sub_metering_1)), xlab="", type = "l", ylab="Energy sub metering")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_2)), col = "red")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_3)), col = "blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"), lty=1, cex=0.7)
plot(datetime,as.numeric(as.character(used_data$Global_reactive_power)), ylab="Global_reactive_power", xlab="datetime", type = "l")
par(mfrow=c(2,2))
plot(datetime,as.numeric(as.character(used_data$Global_active_power)), ylab="Global active power (kilowatts)", xlab="", type = "l")
plot(datetime,as.numeric(as.character(used_data$Voltage)), ylab="Voltage", xlab="datetime", type = 'l')
plot(datetime,as.numeric(as.character(used_data$Sub_metering_1)), xlab="", type = "l", ylab="Energy sub metering")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_2)), col = "red")
lines(datetime,as.numeric(as.character(used_data$Sub_metering_3)), col = "blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"), lty=1, cex=0.7)
plot(datetime,as.numeric(as.character(used_data$Global_reactive_power)), ylab="Global_reactive_power", xlab="datetime", type = "l")
